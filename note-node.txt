1、node解决了什么问题？

2、node使用场景？

3、node出现之前的技术方案？

web服务器，启动一个server，提供路由访问资源，感觉和nginx作用一致。

nginx反向代理 /usr/local/etc/nginx

客户机-》代理服务器-》防火墙-》内容服务器

一、全局对象
1、__filename
当前正在执行的脚本的文件名，它将输出文件所在位置的绝对路径。

2、__dirname
当前执行脚本所在的目录。

3、process
process是一个全局变量，即global对象的属性，用于描述当前node.js进程状态的对象，提供了一个与
操作系统的简单接口。

事件：
exit:当进程准备退出时触发。
process.on('exit', function(code) {})

process属性：
stdout
stderr
argv:返回一个数组[node, 脚本文件名, 参数1, 参数2, ...]
env:返回当前shell的环境变量
pid:当前进程号
platform:运行程序所在系统平台

process的方法:
process.abort():退出node
process.cwd():返回当前进程的工作目录
process.exit([code]):指定code结束进程

二、常用工具util
var util = require('util');

1、util.inherits(constructior, superConstructor)
˜
三、文件系统

阻塞和非阻塞
阻塞：nodejs在执行其他非JavaScript操作的时候，不能继续执行JavaScript操作直到非JavaScript操作执行
结束后。
非阻塞：nodejs可以把非JavaScript操作放到操作系统内核异步执行，不影响JavaScript操作执行，直到非JavaScript
操作执行完成后加入到事件队列里面等待回调。

事件轮询：public/event_loop(图片)
异步函数执行结束后，会在事件队列里面添加一个事件，主线程中的代码执行结束后，下一次主线程轮询开始会从事件队列
中读取事件（先进先出）并执行对应的回调函数。

事件轮询过程：
1、timers：执行满足条件的setTimeout、setInterval
2、I/O callbacks：是否有已完成的I/O操作的回调函数，来自上一轮的poll残留
3、idle、prepare：系统调用
4、poll：等待还没完成的I/O事件，会因为timers和超时等结束等待
5、check：执行setImmedate回调
6、close callbacks：关闭所有的closing handles，一些onclose事件

浏览器的事件轮询：

多线程
gc

1、热启动工具
2、debug工具
3、post参数处理插件